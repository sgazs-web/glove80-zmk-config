/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79 52 53 54 55 69 70 71>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 55 56 64 65 66 67 68 69 70 71 72 54 55 56 57 72 73 74>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        q {
            bindings = <&kp Q>;
            key-positions = <26 29>;
            layers = <0>;
        };

        z {
            bindings = <&kp Z>;
            key-positions = <50 59>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1      &kp F2    &kp F3           &kp F4            &kp F5                                                                                                            &kp F6             &kp F7             &kp F8           &kp F9    &kp F10
&kp EQUAL   &kp N1    &kp C_PREVIOUS   &kp C_PLAY_PAUSE  &kp C_NEXT         &kp N5                                                                          &kp N6         &kp C_MUTE         &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp N0    &kp MINUS
&kp TAB     &kp K     &kp L            &kp D             &kp G              &kp Q                                                                           &kp DOT        &kp H              &kp F              &kp Y            &kp X     &kp BSLH
&kp ESC     &lt 3 A   &hml LEFT_ALT S  &hml LCTRL E      &hml LEFT_SHIFT R  &kp Z                                                                           &kp COMMA      &hmr LEFT_SHIFT N  &hmr LCTRL I       &hmr O LEFT_ALT  &lt 4 T   &kp SQT
&kp GRAVE   &kp B     &kp W            &kp C             &kp P              &kp SLASH  &kp TAB      &kp SPACE  &none    &none    &tog 5        &kp ESCAPE   &kp SEMICOLON  &kp U              &kp M              &kp V            &kp J     &kp PG_UP
&magic 6 0  &kp HOME  &kp END          &kp LEFT          &kp RIGHT                     &lt 2 ENTER  &kp DEL    &kp F11  &kp F12  &kp LEFT_GUI  &lt 1 SPACE                 &kp UP             &kp DOWN           &kp LBKT         &kp RBKT  &kp PG_DN
            >;
        };

        Numpad {
            bindings = <
&none  &none       &none             &none          &none                                                                                 &none                      &none          &none               &none       &none
&none  &none       &none             &none          &none                     &none                                                &none  &none                      &none          &none               &none       &none
&none  &none       &kp N7            &kp N8         &kp N9                    &none                                                &none  &kp TAB                    &kp PERCENT    &none               &none       &none
&none  &kp N0      &hml LEFT_ALT N4  &hml LCTRL N5  &hml LEFT_SHIFT NUMBER_6  &none                                                &none  &hmr LEFT_SHIFT BACKSPACE  &hmr LCTRL AT  &hmr LEFT_ALT HASH  &kp ESCAPE  &none
&none  &kp DELETE  &kp NUMBER_1      &kp N2         &kp N3                    &none  &none      &none  &none  &none  &none  &none  &none  &kp COMMA                  &kp PERIOD     &none               &none       &none
&none  &none       &none             &none          &none                            &kp SPACE  &none  &none  &none  &none  &none         &none                      &none          &none               &none       &none
            >;
        };

        Programing {
            bindings = <
&none  &none       &none                     &none             &none                                                                                  &none                         &none                     &none                    &none             &none
&none  &none       &none                     &none             &none                  &none                                                    &none  &none                         &none                     &none                    &none             &none
&none  &none       &kp SEMICOLON             &kp AMPERSAND     &kp BACKSLASH          &none                                                    &none  &kp PLUS                      &kp ASTERISK              &kp COLON                &none             &none
&none  &kp DLLR    &hml LEFT_ALT UNDERSCORE  &hml LCTRL EQUAL  &hml LEFT_SHIFT CARET  &none                                                    &none  &hmr LEFT_SHIFT SINGLE_QUOTE  &hmr LCTRL DOUBLE_QUOTES  &hmr LEFT_ALT LESS_THAN  &kp GREATER_THAN  &none
&none  &kp DELETE  &none                     &kp PIPE          &kp EXCLAMATION        &none  &none  &none  &none  &none  &none  &none          &none  &kp MINUS                     &kp SLASH                 &caps_word               &kp QUESTION      &none
&none  &none       &none                     &none             &none                         &none  &none  &none  &none  &none  &kp BACKSPACE         &none                         &none                     &none                    &none             &none
            >;
        };

        Brackets {
            bindings = <
&none  &none  &none                 &none                  &none                                                                           &none            &none             &none              &none  &none
&none  &none  &none                 &none                  &none           &none                                                    &none  &none            &none             &none              &none  &none
&none  &none  &none                 &none                  &none           &none                                                    &none  &none            &none             &none              &none  &none
&none  &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE  &none                                                    &none  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &none  &none
&none  &none  &none                 &none                  &none           &none  &none          &none  &none  &none  &none  &none  &none  &none            &none             &none              &none  &none
&none  &none  &none                 &none                  &none                  &kp BACKSPACE  &none  &none  &none  &none  &none         &none            &none             &none              &none  &none
            >;
        };

        Functions {
            bindings = <
&none  &none  &none             &none             &none                                                                               &none               &none              &none             &none  &none
&none  &none  &none             &none             &none               &none                                                    &none  &none               &none              &none             &none  &none
&none  &none  &kp F4            &kp F5            &kp F6              &none                                                    &none  &kp F10             &kp F11            &kp F12           &none  &none
&none  &none  &hml LEFT_ALT F1  &hml LCTRL F2     &hml LEFT_SHIFT F3  &none                                                    &none  &hmr LEFT_SHIFT F7  &hmr LCTRL F8      &hmr LEFT_ALT F9  &none  &none
&none  &none  &kp C_PREVIOUS    &kp C_PLAY_PAUSE  &kp C_NEXT          &none  &none          &none  &none  &none  &none  &none  &none  &kp C_MUTE          &kp C_VOLUME_DOWN  &kp C_VOL_UP      &none  &none
&none  &none  &none             &none             &none                      &kp BACKSPACE  &none  &none  &none  &none  &none         &none               &none              &none             &none  &none
            >;
        };

        Game {
            bindings = <
&none  &none  &none  &none  &none                                                                       &none     &none         &none      &none  &none
&none  &none  &none  &none  &none  &none                                                         &none  &none     &none         &none      &none  &none
&none  &kp X  &kp M  &kp F  &kp G  &none                                                         &none  &none     &none         &none      &none  &none
&none  &kp R  &kp A  &kp W  &kp D  &none                                                         &none  &kp LEFT  &kp UP_ARROW  &kp RIGHT  &none  &none
&none  &kp T  &kp C  &kp S  &kp E  &none  &kp TAB    &none           &none  &none  &to 0  &none  &none  &none     &kp DOWN      &none      &none  &none
&none  &none  &none  &none  &none         &kp SPACE  &kp LEFT_SHIFT  &none  &none  &none  &none         &none     &none         &none      &none  &none
            >;
        };

        Magic {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
